# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import deviceflow_pb2 as deviceflow__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class TaskOperatorOrientedDeviceFlowStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetDeviceflowPulsarClient = channel.unary_unary(
                '/deviceflow.TaskOperatorOrientedDeviceFlow/GetDeviceflowPulsarClient',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=deviceflow__pb2.PulsarClient.FromString,
                )
        self.GetDeviceflowWebsocket = channel.unary_unary(
                '/deviceflow.TaskOperatorOrientedDeviceFlow/GetDeviceflowWebsocket',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=deviceflow__pb2.Websocket.FromString,
                )
        self.NotifyStart = channel.unary_unary(
                '/deviceflow.TaskOperatorOrientedDeviceFlow/NotifyStart',
                request_serializer=deviceflow__pb2.NotifyRequest.SerializeToString,
                response_deserializer=deviceflow__pb2.OperationResponse.FromString,
                )
        self.NotifyComplete = channel.unary_unary(
                '/deviceflow.TaskOperatorOrientedDeviceFlow/NotifyComplete',
                request_serializer=deviceflow__pb2.NofifyCompleteRequest.SerializeToString,
                response_deserializer=deviceflow__pb2.OperationResponse.FromString,
                )
        self.RegisterTask = channel.unary_unary(
                '/deviceflow.TaskOperatorOrientedDeviceFlow/RegisterTask',
                request_serializer=deviceflow__pb2.RegisterRequest.SerializeToString,
                response_deserializer=deviceflow__pb2.OperationResponse.FromString,
                )
        self.UnRegisterTask = channel.unary_unary(
                '/deviceflow.TaskOperatorOrientedDeviceFlow/UnRegisterTask',
                request_serializer=deviceflow__pb2.UnRegisterRequest.SerializeToString,
                response_deserializer=deviceflow__pb2.OperationResponse.FromString,
                )
        self.GetTotalComputeResources = channel.unary_unary(
                '/deviceflow.TaskOperatorOrientedDeviceFlow/GetTotalComputeResources',
                request_serializer=deviceflow__pb2.TotalComputeResourcesRequest.SerializeToString,
                response_deserializer=deviceflow__pb2.TotalComputeResourcesResponse.FromString,
                )
        self.CheckDeviceflowDispatchFinished = channel.unary_unary(
                '/deviceflow.TaskOperatorOrientedDeviceFlow/CheckDeviceflowDispatchFinished',
                request_serializer=deviceflow__pb2.CheckDeviceflowDispatchRequest.SerializeToString,
                response_deserializer=deviceflow__pb2.OperationResponse.FromString,
                )


class TaskOperatorOrientedDeviceFlowServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetDeviceflowPulsarClient(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDeviceflowWebsocket(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NotifyStart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NotifyComplete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnRegisterTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTotalComputeResources(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckDeviceflowDispatchFinished(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TaskOperatorOrientedDeviceFlowServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetDeviceflowPulsarClient': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDeviceflowPulsarClient,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=deviceflow__pb2.PulsarClient.SerializeToString,
            ),
            'GetDeviceflowWebsocket': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDeviceflowWebsocket,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=deviceflow__pb2.Websocket.SerializeToString,
            ),
            'NotifyStart': grpc.unary_unary_rpc_method_handler(
                    servicer.NotifyStart,
                    request_deserializer=deviceflow__pb2.NotifyRequest.FromString,
                    response_serializer=deviceflow__pb2.OperationResponse.SerializeToString,
            ),
            'NotifyComplete': grpc.unary_unary_rpc_method_handler(
                    servicer.NotifyComplete,
                    request_deserializer=deviceflow__pb2.NofifyCompleteRequest.FromString,
                    response_serializer=deviceflow__pb2.OperationResponse.SerializeToString,
            ),
            'RegisterTask': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterTask,
                    request_deserializer=deviceflow__pb2.RegisterRequest.FromString,
                    response_serializer=deviceflow__pb2.OperationResponse.SerializeToString,
            ),
            'UnRegisterTask': grpc.unary_unary_rpc_method_handler(
                    servicer.UnRegisterTask,
                    request_deserializer=deviceflow__pb2.UnRegisterRequest.FromString,
                    response_serializer=deviceflow__pb2.OperationResponse.SerializeToString,
            ),
            'GetTotalComputeResources': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTotalComputeResources,
                    request_deserializer=deviceflow__pb2.TotalComputeResourcesRequest.FromString,
                    response_serializer=deviceflow__pb2.TotalComputeResourcesResponse.SerializeToString,
            ),
            'CheckDeviceflowDispatchFinished': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckDeviceflowDispatchFinished,
                    request_deserializer=deviceflow__pb2.CheckDeviceflowDispatchRequest.FromString,
                    response_serializer=deviceflow__pb2.OperationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'deviceflow.TaskOperatorOrientedDeviceFlow', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TaskOperatorOrientedDeviceFlow(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetDeviceflowPulsarClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/deviceflow.TaskOperatorOrientedDeviceFlow/GetDeviceflowPulsarClient',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            deviceflow__pb2.PulsarClient.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDeviceflowWebsocket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/deviceflow.TaskOperatorOrientedDeviceFlow/GetDeviceflowWebsocket',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            deviceflow__pb2.Websocket.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NotifyStart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/deviceflow.TaskOperatorOrientedDeviceFlow/NotifyStart',
            deviceflow__pb2.NotifyRequest.SerializeToString,
            deviceflow__pb2.OperationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NotifyComplete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/deviceflow.TaskOperatorOrientedDeviceFlow/NotifyComplete',
            deviceflow__pb2.NofifyCompleteRequest.SerializeToString,
            deviceflow__pb2.OperationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/deviceflow.TaskOperatorOrientedDeviceFlow/RegisterTask',
            deviceflow__pb2.RegisterRequest.SerializeToString,
            deviceflow__pb2.OperationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnRegisterTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/deviceflow.TaskOperatorOrientedDeviceFlow/UnRegisterTask',
            deviceflow__pb2.UnRegisterRequest.SerializeToString,
            deviceflow__pb2.OperationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTotalComputeResources(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/deviceflow.TaskOperatorOrientedDeviceFlow/GetTotalComputeResources',
            deviceflow__pb2.TotalComputeResourcesRequest.SerializeToString,
            deviceflow__pb2.TotalComputeResourcesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckDeviceflowDispatchFinished(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/deviceflow.TaskOperatorOrientedDeviceFlow/CheckDeviceflowDispatchFinished',
            deviceflow__pb2.CheckDeviceflowDispatchRequest.SerializeToString,
            deviceflow__pb2.OperationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
