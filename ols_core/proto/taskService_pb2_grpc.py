# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import taskService_pb2 as taskService__pb2


class TaskMgrStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.submitTask = channel.unary_unary(
                '/TaskMgr/submitTask',
                request_serializer=taskService__pb2.TaskConfig.SerializeToString,
                response_deserializer=taskService__pb2.OperationStatus.FromString,
                )
        self.stopTask = channel.unary_unary(
                '/TaskMgr/stopTask',
                request_serializer=taskService__pb2.TaskID.SerializeToString,
                response_deserializer=taskService__pb2.OperationStatus.FromString,
                )
        self.getTaskStatus = channel.unary_unary(
                '/TaskMgr/getTaskStatus',
                request_serializer=taskService__pb2.TaskID.SerializeToString,
                response_deserializer=taskService__pb2.TaskStatus.FromString,
                )
        self.getTaskQueue = channel.unary_unary(
                '/TaskMgr/getTaskQueue',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=taskService__pb2.TaskQueue.FromString,
                )
        self.changeScheduler = channel.unary_unary(
                '/TaskMgr/changeScheduler',
                request_serializer=taskService__pb2.Scheduler.SerializeToString,
                response_deserializer=taskService__pb2.OperationStatus.FromString,
                )


class TaskMgrServicer(object):
    """Missing associated documentation comment in .proto file."""

    def submitTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTaskStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTaskQueue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def changeScheduler(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TaskMgrServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'submitTask': grpc.unary_unary_rpc_method_handler(
                    servicer.submitTask,
                    request_deserializer=taskService__pb2.TaskConfig.FromString,
                    response_serializer=taskService__pb2.OperationStatus.SerializeToString,
            ),
            'stopTask': grpc.unary_unary_rpc_method_handler(
                    servicer.stopTask,
                    request_deserializer=taskService__pb2.TaskID.FromString,
                    response_serializer=taskService__pb2.OperationStatus.SerializeToString,
            ),
            'getTaskStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.getTaskStatus,
                    request_deserializer=taskService__pb2.TaskID.FromString,
                    response_serializer=taskService__pb2.TaskStatus.SerializeToString,
            ),
            'getTaskQueue': grpc.unary_unary_rpc_method_handler(
                    servicer.getTaskQueue,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=taskService__pb2.TaskQueue.SerializeToString,
            ),
            'changeScheduler': grpc.unary_unary_rpc_method_handler(
                    servicer.changeScheduler,
                    request_deserializer=taskService__pb2.Scheduler.FromString,
                    response_serializer=taskService__pb2.OperationStatus.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TaskMgr', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TaskMgr(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def submitTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskMgr/submitTask',
            taskService__pb2.TaskConfig.SerializeToString,
            taskService__pb2.OperationStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskMgr/stopTask',
            taskService__pb2.TaskID.SerializeToString,
            taskService__pb2.OperationStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getTaskStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskMgr/getTaskStatus',
            taskService__pb2.TaskID.SerializeToString,
            taskService__pb2.TaskStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getTaskQueue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskMgr/getTaskQueue',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            taskService__pb2.TaskQueue.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def changeScheduler(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskMgr/changeScheduler',
            taskService__pb2.Scheduler.SerializeToString,
            taskService__pb2.OperationStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
