# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import rayclusterService_pb2 as rayclusterService__pb2


class RayClusterMgrStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.createRayCluster = channel.unary_unary(
                '/RayClusterMgr/createRayCluster',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=rayclusterService__pb2.RayClusterActResponse.FromString,
                )
        self.deleteRayCluster = channel.unary_unary(
                '/RayClusterMgr/deleteRayCluster',
                request_serializer=rayclusterService__pb2.RayClusterParam.SerializeToString,
                response_deserializer=rayclusterService__pb2.RayClusterActResponse.FromString,
                )
        self.modifyRayCluster = channel.unary_unary(
                '/RayClusterMgr/modifyRayCluster',
                request_serializer=rayclusterService__pb2.RayClusterModifyParam.SerializeToString,
                response_deserializer=rayclusterService__pb2.RayClusterActResponse.FromString,
                )
        self.queryRayCluster = channel.unary_unary(
                '/RayClusterMgr/queryRayCluster',
                request_serializer=rayclusterService__pb2.RayClusterParam.SerializeToString,
                response_deserializer=rayclusterService__pb2.RayClusterQueryResult.FromString,
                )


class RayClusterMgrServicer(object):
    """Missing associated documentation comment in .proto file."""

    def createRayCluster(self, request, context):
        """create ray cluster 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteRayCluster(self, request, context):
        """delete ray cluster
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def modifyRayCluster(self, request, context):
        """modify ray cluster
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def queryRayCluster(self, request, context):
        """query ray cluster
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RayClusterMgrServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'createRayCluster': grpc.unary_unary_rpc_method_handler(
                    servicer.createRayCluster,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=rayclusterService__pb2.RayClusterActResponse.SerializeToString,
            ),
            'deleteRayCluster': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteRayCluster,
                    request_deserializer=rayclusterService__pb2.RayClusterParam.FromString,
                    response_serializer=rayclusterService__pb2.RayClusterActResponse.SerializeToString,
            ),
            'modifyRayCluster': grpc.unary_unary_rpc_method_handler(
                    servicer.modifyRayCluster,
                    request_deserializer=rayclusterService__pb2.RayClusterModifyParam.FromString,
                    response_serializer=rayclusterService__pb2.RayClusterActResponse.SerializeToString,
            ),
            'queryRayCluster': grpc.unary_unary_rpc_method_handler(
                    servicer.queryRayCluster,
                    request_deserializer=rayclusterService__pb2.RayClusterParam.FromString,
                    response_serializer=rayclusterService__pb2.RayClusterQueryResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'RayClusterMgr', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RayClusterMgr(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def createRayCluster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RayClusterMgr/createRayCluster',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            rayclusterService__pb2.RayClusterActResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteRayCluster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RayClusterMgr/deleteRayCluster',
            rayclusterService__pb2.RayClusterParam.SerializeToString,
            rayclusterService__pb2.RayClusterActResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def modifyRayCluster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RayClusterMgr/modifyRayCluster',
            rayclusterService__pb2.RayClusterModifyParam.SerializeToString,
            rayclusterService__pb2.RayClusterActResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def queryRayCluster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RayClusterMgr/queryRayCluster',
            rayclusterService__pb2.RayClusterParam.SerializeToString,
            rayclusterService__pb2.RayClusterQueryResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
